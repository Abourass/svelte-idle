import './Upgrade.svelte.css';
/* src/components/Upgrade.svelte generated by Svelte v3.32.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	subscribe,
	text,
	toggle_class
} from "../../_snowpack/pkg/svelte/internal.js";

import { money } from "./store.js";
import { currencyToString } from "./utils.js";

function create_fragment(ctx) {
	let t0;
	let button;
	let h3;
	let t1;
	let t2;
	let p0;
	let t3;
	let t4;
	let t5;
	let t6;
	let p1;
	let t7;
	let t8;
	let mounted;
	let dispose;

	return {
		c() {
			t0 = text("// https://www.julienrouse.com/blog/tutorial-for-idle-game-svelte-part3/\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
			button = element("button");
			h3 = element("h3");
			t1 = text(/*name*/ ctx[0]);
			t2 = space();
			p0 = element("p");
			t3 = text("costs ");
			t4 = text(/*cost*/ ctx[2]);
			t5 = text("$.");
			t6 = space();
			p1 = element("p");
			t7 = text("Owned:");
			t8 = text(/*$numberOfUpgradeBought*/ ctx[3]);
			button.disabled = /*cantBuy*/ ctx[4];
			attr(button, "class", "svelte-8ssqk2");
			toggle_class(button, "cantbuy", /*cantBuy*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, button, anchor);
			append(button, h3);
			append(h3, t1);
			append(button, t2);
			append(button, p0);
			append(p0, t3);
			append(p0, t4);
			append(p0, t5);
			append(button, t6);
			append(button, p1);
			append(p1, t7);
			append(p1, t8);

			if (!mounted) {
				dispose = listen(button, "click", /*updateNumbers*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data(t1, /*name*/ ctx[0]);
			if (dirty & /*cost*/ 4) set_data(t4, /*cost*/ ctx[2]);
			if (dirty & /*$numberOfUpgradeBought*/ 8) set_data(t8, /*$numberOfUpgradeBought*/ ctx[3]);

			if (dirty & /*cantBuy*/ 16) {
				button.disabled = /*cantBuy*/ ctx[4];
			}

			if (dirty & /*cantBuy*/ 16) {
				toggle_class(button, "cantbuy", /*cantBuy*/ ctx[4]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let cantBuy;
	let cost;
	let $money;

	let $numberOfUpgradeBought,
		$$unsubscribe_numberOfUpgradeBought = noop,
		$$subscribe_numberOfUpgradeBought = () => ($$unsubscribe_numberOfUpgradeBought(), $$unsubscribe_numberOfUpgradeBought = subscribe(numberOfUpgradeBought, $$value => $$invalidate(3, $numberOfUpgradeBought = $$value)), numberOfUpgradeBought);

	component_subscribe($$self, money, $$value => $$invalidate(6, $money = $$value));
	$$self.$$.on_destroy.push(() => $$unsubscribe_numberOfUpgradeBought());
	let { name } = $$props;
	let { numberOfUpgradeBought } = $$props;
	$$subscribe_numberOfUpgradeBought();

	// function declarations
	// update the value of `currencyProduced` to the store, adding `n` to it.
	function updateMoney(n) {
		money.update(m => m + n);
	}

	// update the values of `currencyProduced` and `numberBuildings`
	function updateNumbers() {
		updateMoney(-cost);
		numberOfUpgradeBought.update(n => n + 1);
	}

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("numberOfUpgradeBought" in $$props) $$subscribe_numberOfUpgradeBought($$invalidate(1, numberOfUpgradeBought = $$props.numberOfUpgradeBought));
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$numberOfUpgradeBought*/ 8) {
			$: $$invalidate(2, cost = ($numberOfUpgradeBought + 1) * 5);
		}

		if ($$self.$$.dirty & /*cost, $money*/ 68) {
			// reactive declarations
			$: $$invalidate(4, cantBuy = cost > $money);
		}
	};

	return [
		name,
		numberOfUpgradeBought,
		cost,
		$numberOfUpgradeBought,
		cantBuy,
		updateNumbers,
		$money
	];
}

class Upgrade extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0, numberOfUpgradeBought: 1 });
	}
}

export default Upgrade;